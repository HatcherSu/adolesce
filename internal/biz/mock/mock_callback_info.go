// Code generated by MockGen. DO NOT EDIT.
// Source: callback_info.go

// Package biz is a generated GoMock package.
package biz

import (
	biz "adolesce/internal/biz"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCallbackInfoRepo is a mock of CallbackInfoRepo interface.
type MockCallbackInfoRepo struct {
	ctrl     *gomock.Controller
	recorder *MockCallbackInfoRepoMockRecorder
}

// MockCallbackInfoRepoMockRecorder is the mock recorder for MockCallbackInfoRepo.
type MockCallbackInfoRepoMockRecorder struct {
	mock *MockCallbackInfoRepo
}

// NewMockCallbackInfoRepo creates a new mock instance.
func NewMockCallbackInfoRepo(ctrl *gomock.Controller) *MockCallbackInfoRepo {
	mock := &MockCallbackInfoRepo{ctrl: ctrl}
	mock.recorder = &MockCallbackInfoRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCallbackInfoRepo) EXPECT() *MockCallbackInfoRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCallbackInfoRepo) Create(info *biz.CallbackInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", info)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCallbackInfoRepoMockRecorder) Create(info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCallbackInfoRepo)(nil).Create), info)
}

// DeleteByID mocks base method.
func (m *MockCallbackInfoRepo) DeleteByID(id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockCallbackInfoRepoMockRecorder) DeleteByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockCallbackInfoRepo)(nil).DeleteByID), id)
}

// QueryByCallbackId mocks base method.
func (m *MockCallbackInfoRepo) QueryByCallbackId(callbackId string) (*biz.CallbackInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryByCallbackId", callbackId)
	ret0, _ := ret[0].(*biz.CallbackInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryByCallbackId indicates an expected call of QueryByCallbackId.
func (mr *MockCallbackInfoRepoMockRecorder) QueryByCallbackId(callbackId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryByCallbackId", reflect.TypeOf((*MockCallbackInfoRepo)(nil).QueryByCallbackId), callbackId)
}

// QueryList mocks base method.
func (m *MockCallbackInfoRepo) QueryList(arg0 *biz.CallbackInfoFilter) ([]*biz.CallbackInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryList", arg0)
	ret0, _ := ret[0].([]*biz.CallbackInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryList indicates an expected call of QueryList.
func (mr *MockCallbackInfoRepoMockRecorder) QueryList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryList", reflect.TypeOf((*MockCallbackInfoRepo)(nil).QueryList), arg0)
}
